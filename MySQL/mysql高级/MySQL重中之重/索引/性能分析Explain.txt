************************************查看执行计划*******************************************
使用Explain关键字可以模拟优化器执行sql查询语句，从而知道MySQL是如何处理你的SQL
语句的。分析你的查询语句或是表结构的性能瓶颈。

************************************Explain的作用*******************************************
查看表的读取顺序
那些索引可以使用
数据读取操作的操作类型
那些索引被实际使用
表之间的引用
每张表有多少行被物理查询
************************************如何使用Explain*******************************************
Explain+SQL语句
************************************查询分析*******************************************
+----+-------------+-------+------+---------------+------+---------+------+--------+-------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows   | Extra |
+----+-------------+-------+------+---------------+------+---------+------+--------+-------+
|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL | 500273 |       |
+----+-------------+-------+------+---------------+------+---------+------+--------+-------+


*****************id*******************

select 查询的序列号，包含一组数字，表示查询中执行的select子句或操作表的顺序

三种情况
①：id相同，执行顺序由上往下
mysql> explain select * from t1,t2,t3 where t1.id=t2.id and t2.id=t3.id;
+----+-------------+-------+--------+---------------+---------+---------+--------------------+------+-------+
| id | select_type | table | type   | possible_keys | key     | key_len | ref                | rows | Extra |
+----+-------------+-------+--------+---------------+---------+---------+--------------------+------+-------+
|  1 | SIMPLE      | t1    | ALL    | PRIMARY       | NULL    | NULL    | NULL               |    1 |       |
|  1 | SIMPLE      | t2    | eq_ref | PRIMARY       | PRIMARY | 4       | test_explain.t1.id |    1 |       |
|  1 | SIMPLE      | t3    | eq_ref | PRIMARY       | PRIMARY | 4       | test_explain.t1.id |    1 |       |
+----+-------------+-------+--------+---------------+---------+---------+--------------------+------+-------+
3 rows in set (0.00 sec)

②：id不同，如果是子查询，id的序列号会递增，id值越大优先级越高，越优先被执行
mysql> EXPLAIN SELECT t1.id FROM t1 WHERE t1.id IN
    ->          (
    ->              SELECT t2.id FROM t2 WHERE t2.id IN
    ->              (
    ->                 SELECT t3.id FROM t3 WHERE t3.content=''
    ->              )
    ->          );
+----+--------------------+-------+-----------------+---------------+---------+---------+------+------+--------------------------+
| id | select_type        | table | type            | possible_keys | key     | key_len | ref  | rows | Extra                    |
+----+--------------------+-------+-----------------+---------------+---------+---------+------+------+--------------------------+
|  1 | PRIMARY            | t1    | index           | NULL          | PRIMARY | 4       | NULL |    1 | Using where; Using index |
|  2 | DEPENDENT SUBQUERY | t2    | unique_subquery | PRIMARY       | PRIMARY | 4       | func |    1 | Using index; Using where |
|  3 | DEPENDENT SUBQUERY | t3    | unique_subquery | PRIMARY       | PRIMARY | 4       | func |    1 | Using where              |
+----+--------------------+-------+-----------------+---------------+---------+---------+------+------+--------------------------+
3 rows in set (0.00 sec)
③：id相同不同 同时存在;id如果相同，可以认为是一组，从上往下顺序执行。
    再所有中，id值越大，优先级越高，越先执行。
mysql> explain select t2.* from t2,(select * from t3 where t3.content='t3_372') s3 where s3.id=t2.id;
+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+
| id | select_type | table      | type   | possible_keys | key     | key_len | ref   | rows | Extra       |
+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+
|  1 | PRIMARY     | <derived2> | system | NULL          | NULL    | NULL    | NULL  |    1 |             |
|  1 | PRIMARY     | t2         | const  | PRIMARY       | PRIMARY | 4       | const |    1 |             |
|  2 | DERIVED     | t3         | ALL    | NULL          | NULL    | NULL    | NULL  |    1 | Using where |
+----+-------------+------------+--------+---------------+---------+---------+-------+------+-------------+
3 rows in set (0.00 sec)

derived是衍生的意思，就是把结果集当作一个虚拟表。

关注点：id号每个号码表示一次查询，次数越少越好。

*****************select_type*******************
查询类型
simple		普通查询
primary		查询中包含复杂的子部分
derived		在from列表中包含的子查询被标记为derived,结果被当作一个临时表
subquery	在select或where列表中包含子查询
dependent subquery在select或where列表中包含子查询，子查询被标记
uncacheable subquery子查询中含有系统变量@@
union		若第二个select出现在union之后，则被标记为union;
		若union包含在from子句的子查询中，外层select将被标记为derived
union result	从union表获取结果的select

*****************table*******************
查询的是那张表

*****************type*******************
system
表只有一行记录（等于系统表），这是const类型的特列，平时不会出现，
这个也可以忽略不计

const
表示通过索引一次就找到了,const用于比较primary key或者unique索引。
因为只匹配一行数据，所以很快
如将主键置于where列表中，MySQL就能将
该查询转换为一个常量

eq_ref
非唯一性索引扫描，返回匹配某个单独值的所有行.
本质上也是一种索引访问，
它返回所有匹配某个单独值的行，然而，
它可能会找到多个符合条件的行，
所以他应该属于查找和扫描的混合体

ref
非唯一性索引扫描，返回匹配某个单独值的所有行.
本质上也是一种索引访问，
它返回所有匹配某个单独值的行，然而，
它可能会找到多个符合条件的行，
所以他应该属于查找和扫描的混合体

range(有点危险，不过还好)
只检索给定范围的行,使用一个索引来选择行。key 列显示使用了哪个索引

一般就是在你的where语句中出现了between、<、>、in等的查询
这种范围扫描
索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，
不用扫描全部索引。

index(危险)
出现index是sql使用了索引但是没用通过索引进行过滤，一般是使用了覆盖索引或者是利用索引进行了排序分组

all(危险)
Full Table Scan，将遍历全表以找到匹配的行

index_merge
在查询过程中需要多个索引组合使用，通常出现在有 or 的关键字的sql中

ref_or_null
对于某个字段既需要关联条件，也需要null值得情况下。查询优化器会选择用ref_or_null连接查询。

index_subquery
利用索引来关联子查询，不再全表扫描

unique_subquery
改连接类型类似于index_subquery，子查询中的唯一索引。


注意:至少保证查询达到range级别，最好能达到ref
     all与index都不可以


*****************possible_keys*******************
可能使用的索引

*****************key*******************
实际中使用的索引

*****************key_len*******************
表示索引中使用的字节数，可以通过改列计算查询中使用的索引的长度
key_len字段能够帮你检查是否充分的利用上了索引

mysql> explain select sql_no_cache * from emp where emp.age=30 and emp.name like '%abc%';
+----+-------------+-------+------+---------------+--------------+---------+-------+-------+-------------+
| id | select_type | table | type | possible_keys | key          | key_len | ref   | rows  | Extra       |
+----+-------------+-------+------+---------------+--------------+---------+-------+-------+-------------+
|  1 | SIMPLE      | emp   | ref  | idx_age_name  | idx_age_name | 5       | const | 49060 | Using where |
+----+-------------+-------+------+---------------+--------------+---------+-------+-------+-------------+
1 row in set (0.00 sec)

mysql> explain select sql_no_cache * from emp where emp.age=30 and emp.name like 'abc%';
+----+-------------+-------+-------+---------------+--------------+---------+------+------+-------------+
| id | select_type | table | type  | possible_keys | key          | key_len | ref  | rows | Extra       |
+----+-------------+-------+-------+---------------+--------------+---------+------+------+-------------+
|  1 | SIMPLE      | emp   | range | idx_age_name  | idx_age_name | 68      | NULL |    1 | Using where |
+----+-------------+-------+-------+---------------+--------------+---------+------+------+-------------+
1 row in set (0.01 sec)

mysql> desc emp;
+--------+-------------+------+-----+---------+----------------+
| Field  | Type        | Null | Key | Default | Extra          |
+--------+-------------+------+-----+---------+----------------+
| id     | int(11)     | NO   | PRI | NULL    | auto_increment |
| empno  | int(11)     | NO   |     | NULL    |                |
| name   | varchar(20) | YES  |     | NULL    |                |
| age    | int(3)      | YES  | MUL | NULL    |                |
| deptId | int(11)     | YES  |     | NULL    |                |
+--------+-------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)
mysql> show index from emp;
+-------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name     | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| emp   |          0 | PRIMARY      |            1 | id          | A         |      500493 |     NULL | NULL   |      | BTREE      |         |               |
| emp   |          1 | idx_age_name |            1 | age         | A         |         200 |     NULL | NULL   | YES  | BTREE      |         |               |
| emp   |          1 | idx_age_name |            2 | name        | A         |         200 |     NULL | NULL   | YES  | BTREE      |         |               |
+-------+------------+--------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
3 rows in set (0.00 sec)

如何计算
1 、先看索引上字段的类型+长度比如 int=4 ;  varchar(20) =20 ; char(20) =20  
2  、如果是varchar或者char这种字符串字段，视字符集要乘不同的值，比如utf-8  要乘 3,GBK要乘2，
3 、varchar这种动态字符串要加2个字节
4、 允许为空的字段要加1个字节  

5=4+1
68=(4+1)+[(20*3)+2+1]

这里的name like '%abc%' 没有命中组合索引中的name索引,'abc%'可以命中

*****************ref*******************
显示索引的那一列被使用了，如果可能的话，是一个常数。那些列或常量被用于查找索引列上的值

*****************rows*******************
rows列显示mysql认为它执行查询时必须检查的行数。(使用索引后从这些行数中查找)越少越好

*****************Extra*******************

包含不适合在其他列中显示但十分重要的额外信息

using filesort危险 查询中排序的字段，排序字段若通过索引去访问将大大提高
排序速度
using temporary危险 使了用临时表保存中间结果,MySQL在对查询结果排序时使用
临时表。常见于排序 order by 和分组查询 group by。

using index
①：表示相应的select操作中使用了覆盖索引(Covering Index)，避免访问了表的数据行，
效率不错！
如果同时出现using where，表明索引被用来执行索引键值的查找;
如果
没有同时出现using where，表明索引只是用来读取数据而非利用索引执行查找。

②：利用索引进行了排序或分组

using where 表明使用了where过滤

useing join buffer危险 使用了连接缓存：

impossible where where子句的值总是false，不能用来获取任何元组

select tables optimized away
在没有GROUPBY子句的情况下，基于索引优化MIN/MAX操作或者
对于MyISAM存储引擎
优化COUNT(*)操作，不必等到执行阶段再进行计算，
查询执行计划生成的阶段即
完成优化。




