锁是计算机协调多个进程或线程并发访问某一资源的机制。
 
在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的资源。
如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问
性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。

********************************************************锁分类*************************************************

从对数据操作的类型（读\写）分
读锁(共享锁)：针对同一份数据，多个读操作可以同时进行而不会互相影响。
写锁（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁。

从对数据操作的粒度分
表锁
行锁

********************************************************表锁(偏读)*************************************************
特点：偏向MyISAM存储引擎，开销小，加锁快；无死锁；锁定粒度大，发生锁冲突的概率最低，并发度最低。

建表sql
 
【表级锁分析--建表SQL】
 
create table mylock(
 id int not null primary key auto_increment,
 name varchar(20)
)engine myisam;
 
insert into mylock(name) values('a');
insert into mylock(name) values('b');
insert into mylock(name) values('c');
insert into mylock(name) values('d');
insert into mylock(name) values('e');
 
select * from mylock;
 
【手动增加表锁】
 lock table 表名字1 read(write)，表名字2 read(write)，其它;
 lock table emp read;
【查看表上加过的锁】
 show open tables;
【解锁】
 unlock tables;

lock table emp read;
当前线程中加上写锁，那么你当前线程就只能读你加锁的那张表，不能去做其它的事情，要赶快读完，然后释放锁。
另一个线程也可以读取你加锁的表，但是不可以修改你加了读锁的表，它会等待你释放读锁资源。

lock table emp write;
当前线程中加上写锁，那么你当前线程可以读取，也可以修改这张表，但是不能去访问其它表，赶快操作完，然后释放锁。
令一个线程不可以读取你加锁的表，也不可以修改你加锁的表，它会等待你释放写锁资源。


********************************************************行锁(偏写)*************************************************
特点：偏向InnoDB存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最高，并发也最高。

      InnoDB与MyISAM的最大不同有两点：一是支持事务transaction，二是采用了行级锁；

********************************************************事务*************************************************

事务是由一组SQL语句组成的逻辑处理单元，事务具有以下4个属性，通常简称为事务的ACID属性。 
l 原子性（Atomicity）：事务是一个原子操作单元，其对数据的修改，要么全都执行，要么全都不执行。 
l 一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，
                       以保持数据的完整性；事务结束时，所有的内部数据结构（如B树索引或双向链表）也都必须是正确的。 
l 隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。
   	 	       这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。 
l 持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。 

并发事务处理带来的问题

脏读：原因是读了未提交的数据
不可重复读：两次读取的数据不一样，原因是有另外一个线程在你第一次读取数据之后对数据进行了更改。
幻读：两次读取的行数不同。

脏读：
 一个事务正在对一条记录做修改，在这个事务完成并提交前，这条记录的数据就处于不一致状态；这时，另一个
事务也来读取同一条记录，如果不加控制，第二个事务读取了这些“脏”数据，并据此做进一步的处理，就会产生
未提交的数据依赖关系。这种现象被形象地叫做”脏读”。 
 
 
一句话：事务A读取到了事务B已修改但尚未提交的的数据，还在这个数据基础上做了操作。此时，如果B事务回滚，A读取
的数据无效，不符合一致性要求。

不可重复读：
 在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据。那么，在第一个
事务的两次读数据之间。由于第二个事务的修改，那么第一个事务读到的数据可能不一样，这样就发生了在一个
事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。
 
      一句话：一个事务范围内两个相同的查询却返回了不同数据。

幻读：
一个事务按相同的查询条件重新读取以前检索过的数据，却发现其他事务插入了满足其查询条件的新数据，这种
现象就称为“幻读”。
 
一句话：事务A 读取到了事务B提交的新增数据，不符合隔离性。 

事务的隔离级别:

脏读”、“不可重复读”和“幻读”，其实都是数据库读一致性问题，必须由数据库提供一定的事务隔离机制来解决。

读未提交	read uncommitted
读已提交	read committed		oracle默认级别
可重复读	repeatable read		mysql默认级别
可序列化	serializable

数据库的事务隔离越严格，并发副作用越小，但付出的代价也就越大，因为事务隔离实质上就是使事务在一定程度上
“串行化”进行，这显然与“并发”是矛盾的。同时，不同的应用对读一致性和事务隔离程度的要求也是不同的，
比如许多应用对“不可重复读”和“幻读”并不敏感，可能更关心数据并发访问的能力。 
 
常看当前数据库的事务隔离级别：show variables like 'tx_isolation';

********************************************************行锁(偏写)*************************************************
建表sql
 
create table test_innodb_lock (a int(11),b varchar(16))engine=innodb;
 
insert into test_innodb_lock values(1,'b2');
insert into test_innodb_lock values(3,'3');
insert into test_innodb_lock values(4,'4000');
insert into test_innodb_lock values(5,'5000');
insert into test_innodb_lock values(6,'6000');
insert into test_innodb_lock values(7,'7000');
insert into test_innodb_lock values(8,'8000');
insert into test_innodb_lock values(9,'9000');
insert into test_innodb_lock values(1,'b1');
 
create index test_innodb_a_ind on test_innodb_lock(a);
 
create index test_innodb_lock_b_ind on test_innodb_lock(b);
 
select * from test_innodb_lock;

行锁定基本演示

事务与行锁是相辅相成的。
一般来说，自动提交的，执行语句的过程中是加锁的，但是看不出效果，因为语句自动提交了。所以我们要使用
set autocommit=0;取消自动提交。
然后update t_emp set age=10 where id=1;
在另一个线程中
update t_emp set age=112 where id=1;这个时候就等待了。证明了上一个sql语句是加了行锁的。
innodb是默认行锁的。
等到第一个事务commit ；之后另一个线程就可以修改了。
这时update 是加了锁的。

那么select 可以加锁吗？

seq 序列号，计数器
1000

线程一：
select xxx seq 
orders+1000
insert order
....
最后提交的时候
1000+1

线程二：
也在执行这个业务
造成了取出的seq都是1000

这就有问题了。

所以在select xxx seq for update；加上写锁。
另一个线程中如果也查询同一行的话就会等待。

如果查询的不是同一行就没问题。
************************************************(行锁：写锁)死锁**************************************
线程一：
select * from t_emp where id=1 for update ;

线程二：
select * from t_emp where id =2 for update;

线程一：
update t_emp set age=123 where id=2;
等待...
线程二：
update t_emp set age=123 id=1;
报错：发现死锁（死锁检测机制）

但是死锁检测机制耗性能，有时会关掉。

那么我们就要遵循一些原则：不要三心二意，锁住那行，改那行

for update是写锁

************************************************select(行锁：读锁)死锁****************************************************
线程一：
select * from t_emp where id=1 lock in share mode;不希望我在提交之前，别人不能改这行

线程二：
select * from t_emp where id=1 for update ;等待...

提交上面...

线程一：
select * form t_mep where id=1 lock in share mode;

线程二：
select * form t_mep where id=1 lock in share mode;

线程一：
update t_mep set age=123 where id=1;如果只有当前线程设置了读锁，是可以修改的，如果其它线程设置了读锁，就等待。

线程二：
update t_emp set age =123 where id=1;
出现死锁

你要读可以，但是你别改呀。会出现死锁的。

查询当前系统都加了什么锁
information_schema元数据（描述数据的数据）
select * from innodb_trx;

kill trx_mysql_thread_id;

杀死锁；

想查询这个锁的线程在干什么那？
show processlist;
id对应trx_mysql_thread_id

那么我们就要遵循一些原则：说话算数，读锁就读，写锁就写

*******************************************************无索引，行锁转表锁**************************************
线程一：
select * from t_emp where empno=1001 for update;

线程二：
select * from t_emp where empno=1002 for update;
等待...

着跟上面的结果不同呀，为什么?
因为上面用的是id，id是主键，有索引，empno没有索引。

create index idx_empno on t_emp(empno);

线程一：
select * from t_emp where empno=1001 for update;

线程二：
select * from t_emp where empno=1002 for update;
可以查出来

innodb是行锁，如果没有用到索引过滤，那么就变成了表锁。

结论：
没有索引，行锁会升级为表锁。

********************************************************间隙锁**************************************************
线程一：
delete from t_emp where id<5 and id>1;

select * from t_emp where id>=1 and id<=8 for update;

线程二：
insert into t_emp values(2,'张晨',99,10099);
等待...

为什么呀？我改变的是第2行

因为这是间隙锁，1~8的行都锁上了。

【什么是间隙锁】
当我们用范围条件而不是相等条件检索数据，并请求共享或排他锁时，InnoDB会给
符合条件的已有数据记录的索引项加锁；对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)”，
InnoDB也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（GAP Lock）。
 
【危害】
因为Query执行过程中通过过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在。
间隙锁有一个比较致命的弱点，就是当锁定一个范围键值之后，即使某些不存在的键值也会被无辜的锁定，
而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害


********************************************************查询行锁*************************************************
show status like 'innodb_row_lock%';
status是报表数据，不能改。
variables 是属性，是可以改的。

mysql> show status like 'innodb_row_lock%';
+-------------------------------+-------+
| Variable_name                 | Value |
+-------------------------------+-------+
| Innodb_row_lock_current_waits | 0     |当前锁的个数
| Innodb_row_lock_time          | 0     |总共锁了多长时间
| Innodb_row_lock_time_avg      | 0     |平均每个锁锁了多长时间
| Innodb_row_lock_time_max      | 0     |锁最长的时间
| Innodb_row_lock_waits         | 0     |加锁的次数
+-------------------------------+-------+
5 rows in set (0.00 sec)

*******************************************************原则**************************************************
不要三心二意，锁住那行，改那行
说话算数，读锁就读，写锁就写
不要拖拖拉拉，加了锁，赶快用完释放
如果使用锁，请小范围锁。间隙锁问题
无索引，不行锁
用情越深，付出越大(隔离级别越高，锁的越重)