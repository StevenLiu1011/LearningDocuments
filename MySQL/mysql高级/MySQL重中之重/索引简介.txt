********************************索引是什么**********************************
索引是帮助mysql高效获取数据的数据结构
索引的本质是数据结构b+tree,可以理解为排好序的快速查找的数据结构

索引的目的在于提高查询效率，可以类比字典目录。
如果要查mysql这个单词，我们肯定需要定位到m字母，然后从上往下找到y字母，再找到
剩下的sql。

如果没有索引，那么你可能需要a---z，如果我想找到java开头的单词那？或者Oracle
开头的单词那？

那就没办法完成了

索引的详细介绍：
再数据之外，数据库还维护者满足特定查找算法的数据结构，这些数据结构以某种
方式引用（指向）数据，这样就可以再这些数据结构上实现高级查找算法。这种
数据结构就是索引。

图：数据与索引

左边是数据表，最左边是数据记录的物理地址

为了加快数据表中字段的查找，可以维护一个右边所示的二叉查找树，每个节点分别
包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以根据二叉查找
再一定复杂度内获取到相应的数据，从而快速的检索出符合条件的记录。

结论：数据本身之外，数据库还维护者一个满足特定查找算法的数据结构，这些数据
结构以某种方式指向数据，这样就可以再这些数据结构的基础上实现高级查找算法，
这种数据结构就是索引。

一般来说索引本身也很大，不可能全部存储再内存中，因此索引往往以索引文件的
形式存储再磁盘上



********************************索引的优点**********************************
提高数据的检索效率，降低数据库的io成本。（字典的目录）
降低数据排序的成本，降低了cpu的消耗。（通过索引对数据进行排序）

降低了时间

********************************索引的缺点**********************************
①：(时间成本)虽然索引大大提高了查询速度，同时却会降低更新表的速度，例如对表
	进行insert、update、delete。因为更新表时，mysql不仅要保存数据
	还要保存一下索引文件每次更新添加了索引列的字段。
②：（空间成本）实际上索引也是一张表，该表保存两主键与索引字段，并指向实体表的记录，
	所以索引列也是要占用空间的

********************************索引的结构**********************************
首先了解一下BTree(平衡二叉树)
二叉树都知道，是折半查找的意思，但是二叉树有可能出现不平衡一边倒的问题。
BTree索引：平衡树（对数据进行调整：旋转）
（缺叶：对需要查询的内容进行磁盘加载到内存，io操作）由于占内存比较大
1、key
2、指向下一个节点的指针
3、指向数据块的指针

B+Tree索引：少维护一个值，同样的内存就能加载更多的节点，这样侧面就减少
了磁盘io加载内存的操作(缺叶的情况就少了)，占内存比较小。
1、key
2、指向下个节点的指针

减少io加载

我们希望随着问题规模时间的增长复杂度是取余稳定地上升，但是上升的幅度
不能是太大。

例如:链表中的跳表O(logN),平衡树O(logN),有序数组O(logN)
哈希表操作和数组的插入是不随数据的增加而改变的O(1)

***************************************BTree与B+Tree的区别*******************************
B+Tree与B-Tree 的区别
 
　1）B-树的关键字和记录是放在一起的，叶子节点可以看作外部节点，不包含任何信息；
B+树的非叶子节点中只有关键字和指向下一个节点的索引，记录只放在叶子节点中。
　 2）在B-树中，越靠近根节点的记录查找时间越快，只要找到关键字即可确定记录的存在；
而B+树中每个记录的查找时间基本是一样的，都需要从根节点走到叶子节点，而且在叶子节点
中还要再比较关键字。从这个角度看B-树的性能好像要比B+树好，而在实际应用中却是B+树的
性能要好些。因为B+树的非叶子节点不存放实际的数据，这样每个节点可容纳的元素个数比B-树多，
树高比B-树小，这样带来的好处是减少磁盘访问次数。尽管B+树找到一个记录所需的比较次数要
比B-树多，但是一次磁盘访问的时间相当于成百上千次内存比较的时间，因此实际中B+树的性能可
能还会好些，而且B+树的叶子节点使用指针连接在一起，方便顺序遍历（例如查看一个目录下的所
有文件，一个表中的所有记录等），这也是很多数据库和文件系统使用B+树的缘故。 
　
思考：为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？ 
1) B+树的磁盘读写代价更低 
　　B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B 树更小。
如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。
一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。 
2) B+树的查询效率更加稳定 
　　由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。
所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径
长度相同，导致每一个数据的查询效率相当。

********************************聚簇索引与非聚簇索引**********************************

聚簇索引并不是一种单独的索引类型，而是一种数据的存储方式
聚簇：表示数据行和相邻的键值聚簇的存储在一起

一个表中由于数据的物理存储排列方式只能有一种，所以每个表只能
有一个聚簇索引，一般是我们的主键。例如字典的拼音目录
其它我们创建的索引都是非聚簇索引。例如字典的偏旁部首目录

图：聚簇索引和非聚簇索引

聚簇索引的好处：
按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，
数据库不不用从多个数据块中提取数据，所以节省了大量的io操作。

聚簇索引的限制：
对于mysql数据库目前只有innodb数据引擎支持聚簇索引，而Myisam并不支持聚簇索引。

由于数据物理存储排序方式只能有一种，所以每个Mysql的表只能有一个聚簇索引。
一般情况下就是该表的主键。

为了充分利用聚簇索引的聚簇的特性，所以innodb表的主键列尽量选用有序的顺序id，
而不建议用无序的id，比如uuid这种。
********************************全文索引(搜索引擎)**********************************

全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用
【分词技术】等多种算法智能分析出文本文字中关键词的频率和重要性，然后
按照一定的算法规则智能地筛选出我们想要的搜索结果。
 
CREATE TABLE `article` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `content` text,
  PRIMARY KEY (`id`),
  FULLTEXT KEY `title` (`title`,`content`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
 
不同于like方式的的查询：
SELECT * FROM article WHERE content LIKE ‘%查询字符串%’;
全文索引用match+against方式查询：
SELECT * FROM article WHERE MATCH(title,content) AGAINST (‘查询字符串’);
 
明显的提高查询效率。
 
限制：
mysql5.6.4以前只有Myisam支持，5.6.4版本以后innodb才支持，但是
官方版本不支持中文分词，需要第三方分词插件。
5.7以后官方支持中文分词。
 
随着大数据时代的到来，关系型数据库应对全文索引的需求已力不从心，
逐渐被 solr,elasticSearch等专门的搜索引擎所替代。