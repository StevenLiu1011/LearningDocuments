*************************************Spring是什么?********************************
Spring是一个轻量级的框架，是为了解决企业级复杂的应用而生的一个框架。
它具有轻量级、非侵入性、依赖注入DI、面向切面编程AOP、容器IOC、一站式的特点。

容器IOC:Spring是一个容器，它管理了应用对象的生命周期
面向切面编程AOP：
依赖注入：是IOC的一种实现，通过set和构造器来给对象属性赋值。（还有静态工厂，实例工厂）

    平常的Java开发中，程序员在某个类中需要依赖其它类的方法。

    通常是new一个依赖类再调用类实例的方法，这种开发存在的问题是new的类实例不好统一管理。

    Spring提出了依赖注入的思想，即依赖类不由程序员实例化，而是通过Spring容器帮我们new指定实例并且将实例注入到需要该对象的类中。

    依赖注入的另一种说法是"控制反转"。通俗的理解是：平常我们new一个实例，这个实例的控制权是我们程序员。

    而控制反转是指new实例工作不由我们程序员来做而是交给Spring容器来做。

*************************************搭建Spring环境********************************
导入jar包
commons-logging.jar
spring-beans.jar
spring-context.jar
spring-core.jar
spring-expression.jar

Spring的配置文件：
一个典型的Spring项目需要创建一个或者多个bean配置文件，这些配置文件用于在Spring IOC
容器里配置Bean。Bean的配置文件放在classpath下，也可以放在其它目录下。

在config目录下创建Spring Bean Configuracion File文件

applicationContext.xml


*************************************测试********************************
在bean配置文件中配置一个Bean
<bean id="helloworld" class="com.sdp.edu.bean.HelloWorld"></bean>
注意：id不能重复
class属性：配置类的全类名，IOC容器根据全类名利用反射的技术调用类的无参的构造器来创建类的实例
那我们如何给属性赋值那？
<bean id="helloworld" class="com.sdp.edu.bean.HelloWorld">
	<!--通过property子标签来对类中的属性进行赋值，调用的时属性的set方法-->
	<property name="name"></property>
</bean>
<property>name属性：指定属性名;value属性：指定属性值

获取HellWorld对象
//创建IOC容器对象
ApplicationContext ioc=new ClassPathXmlApplicationContext("applicationContext.xml");

HelloWorld helloWorld=(HelloWorld)ioc.getBean("helloworld");

*************************************IOC与DI********************************
IOC(Inversion of Control):(控制反转)其思想是反转资源获取的方向,传统的资源查找方式
要求组件向容器发起请求查找资源，作为回应，容器适时的返回资源。而应用了IOC之后，则是
容器主动的将资源推送给它所管理的组件，组件所要做的仅是选择一种合适的方式来接受资源。
这种行为也称为查找的被动形式。
DI(Dependency Injection):IOC的另一种表述方式：即组件以一些预先定义好的方式
(例如：setter方法)接受来自如容器的资源注入。

*************************************配置Bean:基于XML的方式********************************
在xml文件中通过bean节点来配置bean

通过全类名的方式来配置Bean
<bean id="" class=""></bean>

属性id:
在ioc容器中必须是唯一的，id如果没有指定，那么Spring自动将权限定类名作为Bean的名字
id可以指定多个名字，名字之间可用逗号、分号、空格分隔

*************************************Spring容器********************************
在Spring IOC容器读取Bean配置创建Bean实例之前，必须对它进行实例化，只有在容器实例化
后，才可以从IOC容器里获取Bean实例并使用。

结论是：ioc容器实例化的同时给xml中的Bean也实例化。

Spring提供了两种类型的IOC实现：

BeanFactory:
	IOC容器的基本实现，是Spring框架的基础，面向的是Spring本身。

ApplicationContext:
	提供了更多的高级特性，是BeanFactory的子接口。面向的是Spring框架
	的开发者。在测试时使用ApplicationContext,在Web环境中使用的是
	WebApplicationContext。
	  	   

*************************************测试********************************


*************************************测试********************************