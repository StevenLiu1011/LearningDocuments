*************************************Spring是什么?********************************
Spring是一个轻量级的框架，是为了解决企业级复杂的应用而生的一个框架。
它具有轻量级、非侵入性、依赖注入DI、面向切面编程AOP、容器IOC、一站式的特点。

容器IOC:Spring是一个容器，它管理了应用对象的生命周期
面向切面编程AOP：
依赖注入：是IOC的一种实现，通过set和构造器来给对象属性赋值。（还有静态工厂，实例工厂）

    平常的Java开发中，程序员在某个类中需要依赖其它类的方法。

    通常是new一个依赖类再调用类实例的方法，这种开发存在的问题是new的类实例不好统一管理。

    Spring提出了依赖注入的思想，即依赖类不由程序员实例化，而是通过Spring容器帮我们new指定实例并且将实例注入到需要该对象的类中。

    依赖注入的另一种说法是"控制反转"。通俗的理解是：平常我们new一个实例，这个实例的控制权是我们程序员。

    而控制反转是指new实例工作不由我们程序员来做而是交给Spring容器来做。

*************************************搭建Spring环境********************************
导入jar包
commons-logging.jar
spring-beans.jar
spring-context.jar
spring-core.jar
spring-expression.jar

Spring的配置文件：
一个典型的Spring项目需要创建一个或者多个bean配置文件，这些配置文件用于在Spring IOC
容器里配置Bean。Bean的配置文件放在classpath下，也可以放在其它目录下。

在config目录下创建Spring Bean Configuracion File文件

applicationContext.xml


*************************************测试********************************
在bean配置文件中配置一个Bean
<bean id="helloworld" class="com.sdp.edu.bean.HelloWorld"></bean>
注意：id不能重复
class属性：配置类的全类名，IOC容器根据全类名利用反射的技术调用类的无参的构造器来创建类的实例
那我们如何给属性赋值那？
<bean id="helloworld" class="com.sdp.edu.bean.HelloWorld">
	<!--通过property子标签来对类中的属性进行赋值，调用的时属性的set方法-->
	<property name="name"></property>
</bean>
<property>name属性：指定属性名;value属性：指定属性值

获取HellWorld对象
//创建IOC容器对象
ApplicationContext ioc=new ClassPathXmlApplicationContext("applicationContext.xml");

HelloWorld helloWorld=(HelloWorld)ioc.getBean("helloworld");

*************************************IOC与DI********************************
IOC(Inversion of Control):(控制反转)其思想是反转资源获取的方向,传统的资源查找方式
要求组件向容器发起请求查找资源，作为回应，容器适时的返回资源。而应用了IOC之后，则是
容器主动的将资源推送给它所管理的组件，组件所要做的仅是选择一种合适的方式来接受资源。
这种行为也称为查找的被动形式。
DI(Dependency Injection):IOC的另一种表述方式：即组件以一些预先定义好的方式
(例如：setter方法)接受来自如容器的资源注入。

*************************************配置Bean:基于XML的方式********************************
在xml文件中通过bean节点来配置bean

通过全类名的方式来配置Bean
<bean id="" class=""></bean>

属性id:
在ioc容器中必须是唯一的，id如果没有指定，那么Spring自动将权限定类名作为Bean的名字
id可以指定多个名字，名字之间可用逗号、分号、空格分隔

*************************************Spring容器********************************
在Spring IOC容器读取Bean配置创建Bean实例之前，必须对它进行实例化，只有在容器实例化
后，才可以从IOC容器里获取Bean实例并使用。

结论是：ioc容器实例化的同时给xml中的Bean也实例化。

Spring提供了两种类型的IOC实现：

BeanFactory:
	IOC容器的基本实现，是Spring框架的基础，面向的是Spring本身。

ApplicationContext:
	提供了更多的高级特性，是BeanFactory的子接口。面向的是Spring框架
	的开发者。在测试时使用ApplicationContext,在Web环境中使用的是
	WebApplicationContext。
	  	   

*************************************ApplicationContext接口********************************
ApplicationContext的主要实现类:
	ClassPathXmlApplicationContext类：从类路径下加载配置文件
	FileSystemXmlApplicationContext类：从文件系统中加载配置文件

ConfigurableApplicationContext扩展于ApplicationContext,新增加两个主要方法：refresh()和
close()，让ApplicationContext具有启动、刷新、关闭上下文的能力。

ApplicationContext在初始化上下文时就实例化所有的Bean。

WebApplicationContext是专门为WEB应用而准备的，它允许从相对于web根目录的路径下完成初始化。

IOC容器中获取Bean,getBean()方法不是在ApplicationContext接口中的，而是在BeanFactory中。
BeanFactory接口

getBean(String);
getBean(String,Class<T>);
getBean(String,Object...);
getBean(Class<T>);
getBean(Class<T>,Object...);
*************************************获取Bean的方式********************************

通过id获取
	需要强转
通过类型获取
	要保证在ioc容器中该类型的bean只有一个，否则会抛出异常

*************************************属性注入和构造器注入********************************
属性注入setter方法注入：<property></property>
	ioc容器先调用类的无参的构造器创建bean实例
	然后再调用对应的set方法对属性进行赋值
构造器注入:<constructor-arg></constructor-arg>
	ioc容器直接调用类中对应的构造器创建bean实例

要按照构造器中属性的顺序排列，否则
可以通过index属性来指定再构造器中的位置，索引从 0开始。

也可以通过type属性指定在构造器中的类型

--字面值

可用字符串表示的值，可以通过<value>元素标签或value属性进行注入。
基本数据类型及封装类、String等类型都可以采取字面值注入的方式
若字面值中包含特殊字符，可以使用<![CDATA[]]>把字面值包裹起来。

--引用其它Bean

组成应用程序的 Bean 经常需要相互协作以完成应用程序的功能. 要使
 Bean 能够相互访问, 就必须在 Bean 配置文件中指定对 Bean 的引用
在 Bean 的配置文件中, 可以通过 <ref> 元素或 ref  属性为 Bean 的
属性或构造器参数指定对 Bean 的引用. 
也可以在属性或构造器里包含 Bean 的声明, 这样的 Bean 称为内部 Bean

<bean id="service" class="edu.sdp.com.Servvice"></bean>
<bean id="action" class="edu.sdp.com.Action">
	为service属性赋值，因为service属性是一个bean类型，可以使用ref指向ioc容器中的
	其它bean
	<property name="service" ref="service"></property>
</bean>

--内部bean

当 Bean 实例仅仅给一个特定的属性使用时, 可以将其声明为内部 Bean.
内部 Bean 声明直接包含在 <property> 或 <constructor-arg> 元素里, 
不需要设置任何 id 或 name 属性

内部 Bean 不能使用在任何其他地方

--null值和级联属性

可以使用专用的 <null/> 元素标签为 Bean 的字符串或其它对象类型的属性注入 null 值
和 Struts、Hiberante 等框架一样，Spring 支持级联属性的配置。

<bean id="cartItem" class="edu.sdp.com.CartItem">
	<property name="book.title" value="三国"></property>
</bean>

*************************************集合属性********************************
在 Spring中可以通过一组内置的 xml 标签(例如: <list>, <set> 或 <map>) 来配置集合属性.

配置 java.util.List 类型的属性, 需要指定 <list>  标签, 在标签里包含一些元素. 这些标签
可以通过 <value> 指定简单的常量值, 通过 <ref> 指定对其他 Bean 的引用. 通过<bean> 指定
内置 Bean 定义. 通过 <null/> 指定空元素. 甚至可以内嵌其他集合.

数组的定义和 List 一样, 都使用 <list>

配置 java.util.Set 需要使用 <set> 标签, 定义元素的方法与 List 一样.

Java.util.Map通过<map>标签定义，<map>标签里可以使用多个<entry>作为子标签。每个条目包含
一个键和一个值。
必须在<key>标签里定义键
因为键和值的类型没有限制，所以可以自由地为它们指定<value>,<ref>,<bean>或<null>元素。
可以将map的键和值作为<entry>的属性定义：简单常量使用key和value来定义；bean引用通过key-ref
和value-ref属性定义
使用<props>定义java.util.Properties,该标签使用多个<prop>作为子标签。每个<prop>标签必须定义
key属性。

使用utility scheme定义集合
使用基本的集合标签定义集合时，不能将集合作为独立的bean定义，导致其他bean无法引用该集合，所以
无法在不同bean之间共享集合
可以使用util schema里的集合标签定义独立的集合bean.需要注意的是，必须在<beans>根元素里添加
util schema定义

使用p命名空间
为了简化xml文件的配置，越来越多的xml文件采用属性而非子元素配置信息。
Spring从2.5版本开始引入了一个新的p命名空间，可以通过<bean>元素属性的方式配置bean的属性。
使用p命名空间后，基于xml的配置方式将进一步简化

*************************************使用p命名空间********************************

为了简化xml文件的配置，越来越多的xml文件采用属性而非子元素配置信息。
Spring从2.5版本开始引入了一个新的p命名空间，可以通过<bean>元素属性的方式配置bean的属性。
使用p命名空间后，基于xml的配置方式将进一步简化
