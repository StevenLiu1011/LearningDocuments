**************************************XML配置里的Bean自动装配************************************************
Spring IOC容器可以自动装配Bean.需要做的仅仅是在<bean>的autowire属性里指定自动装配的模式

byType：根据类型自动装配
	若ioc容器中有多个于目标bean类型一致的bean.在这种情况下，Spring将无法判定那个bean
最合适该属性.在这种情况下，Spring将无法判定那个bean最合适该属性，所以不能执行自动装配。

byName:根据姓名自动装配
	必须将目标bean的名称和属性名设置的完全相同

constructor：通过构造器自动装配
	当bean中存在多个构造器时，此种自动装配方式将会很复杂，不推荐使用

**************************************XML配置里的Bean自动装配的缺点************************************************
在bean配置文件里设置autowire属性进行自动装配将会装配bean的所有属性.然而，若只希望
装配个别属性时，autowire是修改呢就不够灵活了。

autowire属性要么根据类型自动装配，要么根据名称自动装配，不能两者兼有。

一般情况下，在实际的项目中很少使用自动装配功能，因为和自动装配功能所带来的好处比起来，明确清晰的配置文档更有说服力一些。

**************************************继承Bean和抽象Bean************************************************
Spring 允许继承 bean 的配置, 被继承的 bean 称为父 bean. 继承这个父 Bean 的 Bean 称为子 Bean

子 Bean 从父 Bean 中继承配置, 包括 Bean 的属性配置

子 Bean 也可以覆盖从父 Bean 继承过来的配置

父 Bean 可以作为配置模板, 也可以作为 Bean 实例. 若只想把父 Bean 作为模板, 可以设置 <bean> 的abstract 
属性为 true, 这样 Spring 将不会实例化这个 Bean

并不是 <bean> 元素里的所有属性都会被继承. 比如: autowire, abstract 等.

也可以忽略父 Bean 的 class 属性, 让子 Bean 指定自己的类, 而共享相同的属性配置. 但此时 abstract 必须设为 true

**************************************依赖Bean配置************************************************
Spring 允许用户通过 depends-on 属性设定 Bean 前置依赖的Bean，前置依赖的 Bean 会在本 Bean 实例化之前创建好
如果前置依赖于多个 Bean，则可以通过逗号，或空格的方式配置 Bean 的名称

**************************************Bean的作用域************************************************
在Spring中，可以在<bean>元素的scope属性里设置Bean的作用域

默认情况下，Spring只为每个在ioc容器里声明的bean创建唯一的一个实例，整个ioc容器范围内都能共享该
实例:所有后续的getBean()调用和Bean引用都将返回这个唯一的bean实例，该作用域被称为singleton，它是
所有bean的默认作用域。

scope的类型		说明

singleton	在spring IOC容器中仅存在一个bean实例，bean以单例的方式存在
prototype	每次调用getBean()时都会返回一个新的实例
request		每次http请求都会创建一个新的bean，该作用域仅适用于WebApplicationContext环境
session		同一个Http Session共享一个Bean,不同的Http Session使用不同的bean.该作用域仅适用于WebApplicationContext环境

**************************************使用外部属性文件************************************************
PropertyPlaceholderConfigurer
BeanFactory后置处理器的一个实现
在配置文件里配置 Bean 时, 有时需要在 Bean 的配置里混入系统部署的细节信息(例如: 文件路径, 数据源配置信息等). 
而这些部署细节实际上需要和 Bean 配置相分离

Spring 提供了一个 PropertyPlaceholderConfigurer 的 BeanFactory 后置处理器, 这个处理器允许用户将 Bean 配置的部分内容外移到
属性文件中. 可以在 Bean 配置文件里使用形式为 ${var} 的变量, PropertyPlaceholderConfigurer 从属性文件里加载属性, 并使用这些属性来替换变量.

Spring 还允许在属性文件中使用 ${propName}，以实现属性之间的相互引用。

**************************************IOC容器中Bean的声明周期方法************************************************

Spring IOC容器可以管理Bean的生命周期，Spring允许在Bean生命周期的特定点执行定制的任务。

Spring IOC容器对Bean的生命周期进行管理的过程：

	①：通过构造器或者工厂方法创建Bean实例
	②：为Bean的属性设置值和对其它Bean的引用
	③：调用Bean的初始化方法
	④：Bean可以使用了
	⑤：当容器关闭时，调用Bean的销毁方法

在Bean的声明里设置init-method和destroy-method属性，为Bean指定初始化和销毁方法。

**************************************创建Bean后置处理器************************************************
Bean后置处理器允许在调用初始化方法前后对Bean进行额外的处理。

Bean后置处理器对IOC容器里的所有Bean实例逐一处理，而非单一实例。其典型应用时：检查Bean属性的
正确性或根据特定的标准更改Bean的属性。

对Bean后置处理器而言，需要实现Interface BeanPostProcessor接口.在初始化方法被调用前后,Spring将
把每个Bean实例分别传递给上述接口的以下两个方法:

postProcessAfterInitialization(Object bean,String beanName)

postProcessBeforeInitialization(Object bean,String beanName)

**************************************添加 Bean 后置处理器后 Bean 的生命周期************************************************

Spring IOC 容器对 Bean 的生命周期进行管理的过程:
	①：通过构造器或工厂方法创建 Bean 实例
	②：为 Bean 的属性设置值和对其他 Bean 的引用
	③：将 Bean 实例传递给 Bean 后置处理器的 postProcessBeforeInitialization 方法
	④：调用 Bean 的初始化方法
	⑤：将 Bean 实例传递给 Bean 后置处理器的 postProcessAfterInitialization方法
	⑥：Bean 可以使用了
	⑦：当容器关闭时, 调用 Bean 的销毁方法

