1、HashMap的底层结构是什么？

HashMap在1.8之前是数组+链表


HashMap在1.8就是数组+链表+红黑树

2、HashMap的初始值是多少?
 16
3、HashMap的扩容机制？
JDK1.8之前:
HashMap初始值是16,负载因子是0.75，等到数组长度达到阈值16*0.75=12的时候，
就扩容长度的一倍16*2=32，依次类推。每次扩容，所有的映射关系都要重新计算。

JDK1.8之后：
HashMap初始值是16,负载因子是0.75,等到数组长度达到阈值12的时候，就扩容
长度的一倍，还有一种情况，就是当你的链表长度超过8的时候，比如9，这个时候
数组长度也会扩容一倍，无论是那中情况导致的数组长度扩容，等到数组长度扩容
后的长度要达到64的时候，就要注意了，如果这个时候，你有一个单个链表的长度
超过8了，那么这个时候就会大换血，单个链表变为红黑树。

4、HashMap是如何存储的？
首先hashmap会取key，

如果key为null,就直接判断数组的下标为0的元素是不是为null
,如果是，直接存进去，如果不是，那么判断是不是key为null的Entry，如果是直接
替换掉，如果不是就直接插入到链表的第一位。

如果key不为null
然后算出hashcode值，然后根据数组长度取模，取模的方式
，取模之后的数字肯定是在数组长度的范围之内，这样你就可以根据这个值找到对应的
数组元素的位置，那么到这个数组元素位置之后，你会发现两种情况，已经有这个
key了，那么就替换，如果没有这个key就加到这个元素位置维护的一个链表的后面。
这里判断有没有key是和当前的Entry和next进行判断，到了最后还是没有相同的key,那
么才是添加一个到链表后面。

5、ArrayList的底层结构是什么？
动态数组

6、ArrayList的初始值是多少？
默认数组长度是0，当你add的时候变为10。

