Redis事务是一个单独的隔离操作。

一个业务
set balance 10000
incrby balance 1000
incrby balance 1000
incrby balance 1000
get balance//13000
如果有另外一个业务，他也set balance 10000
这里虽然时单线程模式，但是只是一个命令不影响。

要将多部操作组队执行。
组队
multi
set k1 v1
显示queued
set k2 v2 
执行
exec
这样就将两次set合并为一个事务。

不符合ACID
编译错误解散
运行错误不解散

事务的重要作用:
有很多人有你的账号，同时去抢购。
一个请求想给金额-800
一个请求想给金额-500
一个请求想给金额-100
就1000块钱了

怎么解决？
悲观锁：
一个请求过来的时候，先加锁，然后去判断金额还够不够。
又一个请求过来，它进不去了，等到第一个请求释放所之后
判断一下，发现钱不够了。

乐观锁：
两个请求过来，都进行判断，都没问题，但是总有一个先提交。
先提交的版本号+1,后提交的判断版本号，已经不能提交了。

乐观锁不阻塞读操作，悲观锁阻塞读操作。
多读少写的情况下用乐观锁。

关系型数据库要用悲观锁。
乐观锁也称无锁，Redis是一个多度少写的情况。

watch 悲观锁

第一个业务
set balance 10000
watch balance
multi				--悲观锁
decrby balance 3000
decrby balance 2000
还没提交

另一个业务
watch balance 
multi 
incrby balance 1000
incrby balance 2000
还没提交

这时候第一个业务先提交exec
，这时只有先提交的成功，后提交的失败。


watch之后可以解锁:unwatch
exec自动解锁

三大特性:

单独的隔离操作
没有隔离级别的概念
不保证原子性

如果又一条执行失败，还会往后执行。

redis事务--秒杀案例
难点：并发处理
mysql也能做，就是慢


库存操作
key:   sk:prodid:qt
string: 剩余的个数
秒杀成功者清单
key: sk:prod-id:usr
set: (set：不可重复、不考虑排序，不是对象)
成功者的user_id
成功者的user_id
成功者的user_id

*减库存，加人

压力测试工具，高并发测试
linux中自带:apab

ab --help
-n requests 总请求次数
-c concurrency 模拟人数
-T content-type 表单的媒体类型
10个人同时访问100次。
ab -n 100 -c 10 http://host:port/请求url
如果要提交参数，需要建一个文件
vim postfile

prodid=0101&

或者

prodid=0101&name=zhang3

ab -n 300 -c 50 -p /root/postfile -T 'application/x-www-form-urlencoded'
 http://192.168.67.1:8080/seckill/doseckill

并发后会出现超卖问题，加锁之后也有能崩溃和卖不完。
不要设置的并发量太大，笔记本承受不住。

就算设置了事务和乐观锁，高并发量时，也有可能抛异常（崩溃）

使用连接池解决：
节省每次链接redis服务带来的消耗，把链接好的实例反复使用。

卖不完的情况：使用让抢不到的再抢一次。这样给服务器的压力太大了。

这是一个写操作，不建议使用乐观锁，因为同时请求，总有不成功的。
所以造成了上面的卖不完。浪费了用户的行为

lua脚本
嵌入式语言：脚本语言
使用lua脚本程序替代Jedis操作Redis。降低了连接次数,
每次链接很好资源，就算放到连接池也是耗资源的。
使用lua脚本减少jedis链接redis的次数。

不会有并发，将并发请求变为队列，一个一个来。

①：减少链接次数
②：因为是单线程队列，有原子性。

redis2.6才支持lua脚本


Redis的持久化：两种形式

RDB:指定时间间隔内将内存中的数据快照写入磁盘，dump.rdb
redis会单独fork-个子进程来进行持久化（因为Redis是单线程，
io操作是耗时间的，会阻塞Redis其它的工作。）
会将数据写入到一个临时文件中，待持久化过程都结束了，再用这个
临时文件替换上次持久化好的文件。（全盘备份）
fork
操作系统中进程与进程之间的内存是不能互相访问的。
再linux中，引入了“写时复制技术”，一般情况

shutdown的时候会存盘，RDB是快照存盘，如果这时内存里是空的
flushall，那么会将空的内容替换掉之前的dump.rdb文件。
dump.rdb大小是76时，就是空的。
shutdown是正常存盘，但是当机是不会立即存盘的。

save手动存盘,利用主进程存盘，会阻塞其它请求，等我存完盘。
默认的存盘是再子进程里进行的。

AOF
弥补RDB的缺点：全盘备份（压力大），周期备份()

以日志的形式来记录每个写操作，将Redis执行过的所有写
指令记录下来，只许追加文件但不可以改文件。保存量太大，
恢复起来不容易。要从新执行一遍。

APPEND ONLY MODE
appedonly no默认关

aof与rdb同时开启，如果不一致，听谁的?
aof实时













































