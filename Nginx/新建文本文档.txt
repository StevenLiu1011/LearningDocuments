Nginx的概述：

nginx时一个高性能的http和反向代理服务器，特点是占用内存少，并发能力强。
tomcat也是http服务器

nginx的作用：
①:反向代理
②:负载均衡
③:动静分离

********************************nginx和tomcat是什么关系？**********************

nginx可以作为静态页面的web服务器，同时还支持CGI协议的动态语言，比如php，但是不支持java。

java程序只能通过tomcat配合完成。

tomcat不是一个服务器，它是一个容器，阿帕奇才是服务器。但是阿帕奇不能处理java，所以才有了tomcat

nginx与阿帕奇是竞争对手。

********************************什么是正向代理？**********************



比如有很多的用户client通过代理服务器VPN去访问国外的网站，国外的服务器并不需要知道是谁去访问的，
那么vpn就是正向代理。（一个服务器代理许多用户）

********************************什么是反向代理？**********************


一个用户去访问一个网站，那么这个网站后台是很多个服务器，那么请求该发给谁？这时就需要nginx去
分发请求，它代理了后台服务器的复杂架构，用户不需要知道真正处理请求的是那个服务器。
（屏蔽了后台服务器的复杂结构）

负载均衡：
原则：尽量平均

安装:
pcre.tar.gz
openssl.tar.gz
zlib.tar.gz

nginx.tar.gz

***********************************nginx的原理***************************


一个master带一堆worker，一个请求来了，master交给谁处理？
让worker去抢，worker抢到请求之后：
①：是静态资源或者php请求，自己响应请求
②：是java、jsp动态请求，交给tomcat处理

master的作用：管理、监控
worker:真正干活的

tomcat一定是一个进程，多个线程。
默认是并发200多个线程。

但是nginx，每一个worker里只有一个线程（类似于redis），一个进程里有一个线程，
使用的是io多路复用，虽然是单线程，但是能够在很多任务之间做调整，而且速度很快。
可以并发处理很多请求，能够充分的利用cpu。

tomcat宕机，某个线程出现问题，由于雪崩效应，可能宕机。
而nginx中的一个worker僵死，不会影响其它worker的的工作。

***********************************master-workers的机制的好处:***************************

master-workers的机制的好处:
①：对于每个worker进程来说，独立的进程，不需要加锁，所以省掉了加锁带来的开销，同时
    编程复杂度也降低了。
②：采用独立的进程，各个worker之间互补影响，一个进程僵死，其它进程还在工作，服务不会中断
    master进程则很快启动新的worker进程。当然,worker进程的异常退出，可定是程序有bug，导致当前
    worker上的所有请求失败，不过不会影响到其它worker上的请求，降低了风险。

需要设置多少个worker

	nginx同redis类似都采用了io多路复用，每个worker都是一个独立的进程，但每个进程里只有一个
主线程，通过异步非阻塞的方式处理请求，即使是成千上万个请求也不在话下。每个worker的线程可以把
一个cpu的性能发挥到机制。


***********************************设置worker的数量***************************

worker_processes 4

worker绑定cpu(4个work绑定4个cpu)

worker_cpu_affinity 0001 0010 0100 1000

work绑定cpu(4个work绑定8个cpu中的4个)

worker_cpu-affinity 00000001 00000010 00000100 00001000

***********************************单个worker的连接数worker_connection***************************

如果连接数为2048，那么最大的并发量为多少？
一个请求到worker有两种情况：
	①：静态资源，二次链接
	②：jsp、java资源，需要请求tomcat，四次链接

2048表示一个worker能做的链接数，那么最大并发量为2048/2=1024或者2048/4=512,
如果我们有8个worker，那么就*8;


这个值是表示每个worker进程所能建立连接的最大值，所以，一个nginx能建立的最大连接数，
应该是worker_connections * worker_processes。当然，这里说的是最大连接数，对于HTTP
请求本地资源来说，能够支持的最大并发数量是worker_connections * worker_processes，
如果是支持http1.1的浏览器每次访问要占两个连接，所以普通的静态访问最大并发数是： 
worker_connections * worker_processes /2，而如果是HTTP作为反向代理来说，最大并发数量
应该是worker_connections * worker_processes/4。因为作为反向代理服务器，每个并发会建立
与客户端的连接和与后端服务的连接，会占用两个连接。

***********************************动静分离***************************




